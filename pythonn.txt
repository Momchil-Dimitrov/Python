# 1---Store a person’s name in a variable, and print a message to that person. Your message should be simple, such as, “Hello Eric,would you like to learn some Python today?”

#name = "Momchil"

#print("Hello" + " " + name + " " + ",would you like to learn some Python today?")




#2---Store a person’s name in a variable, and then print that person’s name in lowercase, uppercase, and titlecase.

#name = "Momchil Dimitrov"

#print(name.lower())

#print(name.upper())

#print(name.title())

 



#3---Find a quote from a famous person you admire. Print the quote and the name of its author. Your output should look something like the following, including the quotation marks

 
#name = "albert einstein"

#print(name.title() + " " + "once said:" + " " + "A person who never made a mistake never tried anything new.")





#4---Repeat Exercise 2-5, but this time store the famous person’s name in a variable called famous_person. Then compose your message and store it in a new variable called message. Print your message


#famous_person = "albert einstein"

#message = famous_person.title() + " " + "once said: “A person who never made a mistake never tried anything new.”"

#print(message)

Strings ---
age = 23
message = "Happy " + str(age) + "rd Birthday!"
print(message)        


Loops :
1-#Think of at least three kinds of your favorite pizza. Store these pizza names in a list, and then use a for loop to print the name of each pizza.
pizza_list = ["kaprichoza","margarita","peperoni"]
for pizza in pizza_list:
    print("I love to eat" + " " + pizza.title() + "!" + ".\n")
    
print("Smack that!")

Range:----

for value in range(1,6):
 print(value)

list and range
numbers = list(range(1,6))
print(numbers)

even_numbers = list(range(2,11,2))
print(even_numbers)

squares = []
for value in range(1,11):
    square = value**2
    squares.append(square)
print(squares)

squares = [value**2 for value in range(1,11)]
print(squares)

Sumirane ---

>>> digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
>>> min(digits)
0
>>> max(digits)
9
>>> sum(digits)
45

Zadachi loops ---

#4-3. Counting to Twenty: Use a for loop to print the numbers from 1 to 20,inclusive.

for value in range(1,21):
 
   print(value)

Slices ----

players = ['ivo', 'martina', 'misho', 'filip', 'eli']
print(players[2:])

players = ['ivo', 'martina', 'misho', 'filip', 'eli']
print("Here are the first three players on my team:")
for player in players[:3]:
    print(player.title())


Copy a list : 
my_foods = ['pizza', 'falafel', 'mufin']

friend_foods = my_foods[:]

print("My favorite foods are:")

print(my_foods)
print("\nMy friend's favorite foods are:")

print(friend_foods)


TUPLEs -----

dimensions = (200, 50)

print(dimensions[0])

print(dimensions[1])

dimensions[0] = 250


spisuk = ("pica","burger","kartofki","lyk","qica")

print("Originalno menu:")

for x in spisuk:
   
 print(x)
    

spisuk = ("pica","burger","kartofki","purjola","kasha")

print("\nZameneno menu:")

for x in spisuk:
  
  print(x)

IF i FOR STATEMENTS ----

cars = ['audi', 'bmw', 'subaru', 'toyota']
for car in cars:   
 if car == 'bmw':      
   print(car.upper())   
 else:     
   print(car.title())

requested_topping = 'mushrooms'
 if requested_topping != 'anchovies':
    print("Hold the anchovies!")

banned_users = ['andrew', 'carolina', 'david']

user = 'marie'

if user not in banned_users:

 print(user.title() + ", you can post a response if you wish.")


age = 19

if age >= 18:
 
  print("You are old enough to vote!")

  print("Have you registered to vote yet?")

else:
    
  print("You can't vote!")

age = 10

if age < 4:
   
  print("Your admission cost is $0.")

elif age < 18:
   
  print("Your admission cost is $5.")

else:
   
  print("Your admission cost is $10.")

age = 12
if age < 4:
 price = 0
elif age < 18:
 price = 5
elif age < 65:
 price = 10
else:
 price = 5
print("Your admission cost is $" + str(price) + ".")

LISTS AND IF STATEMENTS

requested_toppings = ['mushrooms', 'green peppers', 'extra cheese']
for requested_topping in requested_toppings:
 print("Adding " + requested_topping + ".")
print("\nFinished making your pizza!")


requested_toppings = ['mushrooms', 'green peppers', 'extra cheese']
for requested_topping in requested_toppings:
    if requested_topping == 'green peppers':
       print("Sorry, we are out of green peppers right now.")
    else:
       print("Adding " + requested_topping + ".")
print("\nFinished making your pizza!")

available_toppings = ['mushrooms', 'olives', 'green peppers',
 'pepperoni', 'pineapple', 'extra cheese']
requested_toppings = ['mushrooms', 'french fries', 'extra cheese']
for requested_topping in requested_toppings:
    if requested_topping in available_toppings:
      print("Adding " + requested_topping + ".")
    else:
        print("Sorry, we don't have " + requested_topping + ".")
print("\nFinished making your pizza!") 



DICTIONARIES-----

alien_0 = {'color': 'green', 'points': 5}
print(alien_0['color'])
print(alien_0['points'])

alien_0 = {'color': 'green', 'points': 5}
new_points = alien_0['points']
print("You just earned " + str(new_points) + " points!")   

alien_0 = {'color': 'green', 'points': 5}
print(alien_0)
alien_0['x_position'] = 0
alien_0['y_position'] = 25
print(alien_0) 


alien_0 = {'color': 'green'}
print("The alien is " + alien_0['color'] + ".")
alien_0['color'] = 'yellow'
print("The alien is now " + alien_0['color'] + ".")


alien_0 = {'x_position': 0, 'y_position': 25, 'speed': 'medium'}
print("Original x-position: " + str(alien_0['x_position']))
# Move the alien to the right.
# Determine how far to move the alien based on its current speed.
if alien_0['speed'] == 'slow':
 x_increment = 1
elif alien_0['speed'] == 'medium':
 x_increment = 2
else:
 # This must be a fast alien.
 x_increment = 3
# The new position is the old position plus the increment.
alien_0['x_position'] = alien_0['x_position'] + x_increment
print("New x-position: " + str(alien_0['x_position']))


LOOPING

user_0 = {
 'username': 'mdimitrov',
 'first': 'momchil',
 'last': 'dimitrov',
 }
for key, value in user_0.items():
  print("\nKey: " + key)
  print("Value: " + value)

favorite_languages = {
 
 'jen': 'python',
 
 'sarah': 'c',
 
 'edward': 'ruby',

 'phil': 'python',
 }


for name, language in favorite_languages.items():
    
  print(name.title() + "'s favorite language is " + language.title() + ".")

favorite_languages = {
 'jen': 'python',
 'sarah': 'c',
 'edward': 'ruby',
 'phil': 'python',
 }
for name in favorite_languages.keys():
   print(name.title())


favorite_languages = {
 'jen': 'python',
 'sarah': 'c',
 'edward': 'ruby',
 'phil': 'python',
 }
friends = ['phil', 'sarah']
for name in favorite_languages.keys():
 print(name.title())

 if name in friends:
   print(" Hi " + name.title() +
   ", I see your favorite language is " +
   favorite_languages[name].title() + "!")

favorite_languages = {
 'jen': 'python',
 'sarah': 'c',
 'edward': 'ruby',
 'phil': 'python',
 }
for name in sorted(favorite_languages.keys()):
 print(name.title() + ", thank you for taking the poll.")


favorite_languages = {
 'jen': 'python',
 'sarah': 'c',
 'edward': 'ruby',
 'phil': 'python',
 }
print("The following languages have been mentioned:")
for language in favorite_languages.values():
 print(language.title())
#IZvejda imenata na ezicite

favorite_languages = {
 'jen': 'python',
 'sarah': 'c',
 'edward': 'ruby',
 'phil': 'python',
 }
print("The following languages have been mentioned:")
for language in set(favorite_languages.values()):
 print(language.title())

#set razchita
aliens = []
# Make 30 green aliens.
for alien_number in range(30):
   new_alien = {'color': 'green', 'points': 5, 'speed': 'slow'}
   aliens.append(new_alien)

# Show the first 5 aliens:
for alien in aliens[:5]:
 print(alien)
print("...")
# Show how many aliens have been created.
print("Total number of aliens: " + str(len(aliens)))

aliens = []
# Make 30 green aliens.
for alien_number in range(30):
   new_alien = {'color': 'green', 'points': 5, 'speed': 'slow'}
   aliens.append(new_alien)

# Show the first 5 aliens:
for alien in aliens[:5]:
 print(alien)
print("...")
# Show how many aliens have been created.
print("Total number of aliens: " + str(len(aliens)))

# Make an empty list for storing aliens.
aliens = []
# Make 30 green aliens.
for alien_number in range (0,30):
 new_alien = {'color': 'green', 'points': 5, 'speed': 'slow'}
 aliens.append(new_alien)

for alien in aliens[0:3]:
 if alien['color'] == 'green':
  alien['color'] = 'yellow'
  alien['speed'] = 'medium'
  alien['points'] = 10

# Show the first 5 aliens:
for alien in aliens[0:5]:
 print(alien)
print("...")

favorite_languages = {
 'jen': ['python', 'ruby'],
 'sarah': ['c'],
 'edward': ['ruby', 'go'],
 'phil': ['python', 'haskell'],
 }
for name, languages in favorite_languages.items():
 print("\n" + name.title() + "'s favorite languages are:")
 for language in languages:
  print("\t" + language.title())

users = {
 'aeinstein': {
 'first': 'albert',
 'last': 'einstein',
 'location': 'princeton',
 },

 'mcurie': {
 'first': 'marie',
 'last': 'curie',
 'location': 'paris',
 },
 }
for username, user_info in users.items():
 print("\nUsername: " + username)
 full_name = user_info['first'] + " " + user_info['last']
 location = user_info['location']
 print("\tFull name: " + full_name.title())
 print("\tLocation: " + location.title())

INPUT METOD:


message = input("Tell me something, and I will repeat it back to you: ")
print(message)

prompt = "If you tell us who you are, we can personalize the messages you see."
prompt += "\nWhat is your first name? "
name = input(prompt)
print("\nHello, " + name + "!")

age = input("How old are you? ")
age = int(age)
if age >= 18:
    print("yo")

height = input("How tall are you, in cm? ")
height = int(height)
if height >= 160:
 print("\nYou're tall enough to ride!")
else:
 print("\nYou'll be able to ride when you're a little older.")

number = input("Enter a number, and I'll tell you if it's even or odd: ")
number = int(number)
if number % 2 == 0:
 print("\nThe number " + str(number) + " is even.")
else:
 print("\nThe number " + str(number) + " is odd.")


current_number = 1
while current_number <= 5:
 print(current_number)
 current_number += 1

prompt = "\nTell me something, and I will repeat it back to you:"
prompt += "\nEnter 'quit' to end the program. "

message = ""
while message != 'quit':
 message = input(prompt)
 print(message)

prompt = "\nTell me something, and I will repeat it back to you:"
prompt += "\nEnter 'quit' to end the program. "
message = ""
while message != 'quit':
 message = input(prompt)

 if message != 'quit':
  print(message)

prompt = "\nTell me something, and I will repeat it back to you:"
prompt += "\nEnter 'quit' to end the program. "
active = True
while active:
  message = input(prompt)

  if message == 'quit':
    active = False
  else:
    print(message)

prompt = "\nPlease enter the name of a city you have visited:"
prompt += "\n(Enter 'quit' when you are finished.) "
while True:
 city = input(prompt)

 if city == 'quit':
   break
 else:
   print("I'd love to go to " + city.title() + "!")

current_number = 0
while current_number < 10:
 current_number += 1
 if current_number % 2 == 0:
   continue

 print(current_number)


x = 1
while x <= 5:
 print(x)
 x += 1

# Start with users that need to be verified, 

# and an empty list to hold confirmed users.


unconfirmed_users = ['alice', 'brian', 'candace']

confirmed_users = []


# Verify each user until there are no more unconfirmed users.

# Move each verified user into the list of confirmed users.


while unconfirmed_users:
 
  current_user = unconfirmed_users.pop()

 
  print("Verifying user: " + current_user.title())
 
  confirmed_users.append(current_user)
 



# Display all confirmed users.

print("\nThe following users have been confirmed:")

for confirmed_user in confirmed_users:
 
  print(confirmed_user.title())

prompt = "\nTell me something, and I will repeat it back to you:"
prompt += "\nEnter 'quit' to end the program. "

u active = True
v while active:
 message = input(prompt)

w if message == 'quit':

prompt = "\nPlease enter the name of a city you have visited:"
prompt += "\n(Enter 'quit' when you are finished.) "
while True:
 city = input(prompt)

 if city == 'quit':
  break
 else:
  print("I'd love to go to " + city.title() + "!")
 active = False
x else:
 print(message)

unconfirmed_users = ['alice', 'brian', 'candace']
confirmed_users = []
# Verify each user until there are no more unconfirmed users.
# Move each verified user into the list of confirmed users.
while unconfirmed_users:
 current_user = unconfirmed_users.pop()

 print("Verifying user: " + current_user.title())
 confirmed_users.append(current_user)
 

# Display all confirmed users.
print("\nThe following users have been confirmed:")
for confirmed_user in confirmed_users:
  print(confirmed_user.title())

responses = {}
# Set a flag to indicate that polling is active.
polling_active = True
while polling_active:
 # Prompt for the person's name and response.
 name = input("\nWhat is your name? ")
 response = input("Which mountain would you like to climb someday? ")

 # Store the response in the dictionary:
 responses[name] = response

 # Find out if anyone else is going to take the poll.
 repeat = input("Would you like to let another person respond? (yes/ no) ")
 if repeat == 'no':
   polling_active = False

# Polling is complete. Show the results.
print("\n--- Poll Results ---")
for name, response in responses.items():
 print(name + " would like to climb " + response + ".")



F u n c t ions ----

def greet_user(username):
 """Display a simple greeting."""
 print("Hello, " + username.title() + "!")

def describe_pet(animal_type, pet_name):
 """Display information about a pet."""
 print("\nI have a " + animal_type + ".")
 print("My " + animal_type + "'s name is " + pet_name.title() + ".")

describe_pet('hamster', 'harry')

describe_pet('dog', 'willie')

def describe_pet(pet_name, animal_type='dog'):
 """Display information about a pet."""
 print("\nI have a " + animal_type + ".")
 print("My " + animal_type + "'s name is " + pet_name.title() + ".")
describe_pet(pet_name='willie')

def describe_pet(animal_type = 'dog', pet_name = 'Koki'):
 """Display information about a pet."""
 print("\nI have a " + animal_type + ".")
 print("My " + animal_type + "'s name is " + pet_name.title() + ".")
describe_pet()

greet_user('jesse')


def get_formatted_name(first_name, last_name, middle_name=''):
 """Return a full name, neatly formatted."""
 if middle_name:
  full_name = first_name + ' ' + middle_name + ' ' + last_name
 else:
  full_name = first_name + ' ' + last_name
 return full_name.title()
 
musician = get_formatted_name('jimi', 'hendrix')
print(musician)

musician = get_formatted_name('john', 'hooker', 'lee')
print(musician)

def build_person(first_name, last_name):
 """Return a dictionary of information about a person."""
 person = {'first': first_name, 'last': last_name}
 return person
musician = build_person('jimi', 'hendrix')
print(musician)

def build_person(first_name, last_name, age=''):
 """Return a dictionary of information about a person."""
 person = {'first': first_name, 'last': last_name}
 if age:
   person['age'] = age
 return person
musician = build_person('jimi', 'hendrix', age=27)
print(musician)


def get_formatted_name(first_name, last_name):
 """Return a full name, neatly formatted."""
 full_name = first_name + ' ' + last_name
 return full_name.title()
# This is an infinite loop!
while True:
u print("\nPlease tell me your name:")
 f_name = input("First name: ")
 l_name = input("Last name: ")

 formatted_name = get_formatted_name(f_name, l_name)
 print("\nHello, " + formatted_name + "!")


def get_formatted_name(first_name, last_name):
 """Return a full name, neatly formatted."""
 full_name = first_name + ' ' + last_name
 return full_name.title()
while True:
 print("\nPlease tell me your name:")
 print("(enter 'q' at any time to quit)")

 f_name = input("First name: ")
 if f_name == 'q':
  break

 l_name = input("Last name: ")
 if l_name == 'q':
  break


 formatted_name = get_formatted_name(f_name, l_name)
 print("\nHello, " + formatted_name + "!")

def grad_durjava(grad_type = 'Sofia', durjavaa ='Bulgaria'):
 
   print("My city " + grad_type + " is located in " + durjavaa.title() + ".")

grad_durjava()

def greet_users(names):
 
"""Print a simple greeting to each user in the list."""

 for name in names:
  
  msg = "Hello, " + name.title() + "!"
  
  print(msg)

usernames = ['hannah', 'ty', 'margot']

greet_users(usernames)


# Start with some designs that need to be printed.

unprinted_designs = ['iphone case', 'robot pendant', 'dodecahedron']

completed_models = []

# Simulate printing each design, until none are left.
# Move each design to completed_models after printing.

while unprinted_designs:
 
  current_design = unprinted_designs.pop()
 

 

# Simulate creating a 3D print from the design.
 

  print("Printing model: " + current_design.title())
 
  completed_models.append(current_design)



# Display all completed models.


print("\nThe following models have been printed:")

for completed_model in completed_models:

  print(completed_model.title())
  


# Start with some designs that need to be printed.

unprinted_designs = ['iphone case', 'robot pendant', 'dodecahedron']

completed_models = []


# Simulate printing each design, until none are left.
# Move each design to completed_models after printing.


while unprinted_designs:
 
   current_design = unprinted_designs.pop()
 

 

# Simulate creating a 3D print from the design.

   print("Printing model: " + current_design.title())
 
   completed_models.append(current_design)


# Display all completed models.


print("\nThe following models have been printed:")

for completed_model in completed_models:

 print(completed_model.title())  

def print_models(unprinted_designs, completed_models):

 """
 Simulate printing each design, until none are left.
 Move each design to completed_models after printing.
 """
 
 while unprinted_designs:

    current_design = unprinted_designs.pop()



 # Simulate creating a 3D print from the design.
 
 print("Printing model: " + current_design)

 completed_models.append(current_design)



def show_completed_models(completed_models):
 
"""Show all the models that were printed."""

   print("\nThe following models have been printed:")
 
   for completed_model in completed_models:


    print(completed_model)

unprinted_designs = ['iphone case', 'robot pendant', 'dodecahedron']

completed_models = []



print_models(unprinted_designs, completed_models)

show_completed_models(completed_models)





#Make a list of magician’s names. Pass the list to a function called show_magicians(), which prints the name of each magician in the list
def 
show_magicinas(magiq):
  
for x in magiq:

    print(x.title() + ".\n")



magicians = ["Roki", "tedi", "Pepo"]



show_magicinas(magicians)


def make_pizza(*toppings):

 """Print the list of toppings that have been requested."""
 
print(toppings)



make_pizza('pepperoni')

make_pizza('mushrooms', 'green peppers', 'extra cheese')


def make_pizza(*toppings):

 """Summarize the pizza we are about to make."""
 
 print("\nMaking a pizza with the following toppings:")
 
 for topping in toppings:

  print("- " + topping)



make_pizza('pepperoni')

make_pizza('mushrooms', 'green peppers', 'extra cheese')



def make_pizza(size, *toppings):
 
"""Summarize the pizza we are about to make."""

 print("\nMaking a " + str(size) +
 "-inch pizza with the following toppings:")
 
for topping in toppings:

  print("- " + topping)



make_pizza(16, 'pepperoni')

make_pizza(12, 'mushrooms', 'green peppers', 'extra cheese')

def build_profile(first, last, **user_info):
 
"""Build a dictionary containing everything we know about a user."""
 
profile = {}
 
profile['first_name'] = first
 
profile['last_name'] = last
 
for key, value in user_info.items():

  profile[key] = value
 
return profile

user_profile = build_profile('albert', 'einstein',
 location='princeton',
 field='physics')

print(user_profile)


class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

p1 = Person("John", 36)

print(p1.name,p1.age)

class Dog():
 --snip--
my_dog = Dog('willie', 6)
your_dog = Dog('lucy', 3)
print("My dog's name is " + my_dog.name.title() + ".")
print("My dog is " + str(my_dog.age) + " years old.")
my_dog.sit()
166 Chapter 9
print("\nYour dog's name is " + your_dog.name.title() + ".")
print("Your dog is " + str(your_dog.age) + " years old.")
your_dog.sit()




class Car():
 """A simple attempt to represent a car."""
 def __init__(self, make, model, year):
    """Initialize attributes to describe a car."""
    self.make = make
    self.model = model
    self.year = year

 def get_descriptive_name(self):
    """Return a neatly formatted descriptive name."""
    long_name = str(self.year) + ' ' + self.make + ' ' + self.model
    return long_name.title()

my_new_car = Car('audi', 'a4', 2016)
print(my_new_car.get_descriptive_name())


class Car():

 def __init__(self, make, model, year):
    """Initialize attributes to describe a car."""
    self.make = make
    self.model = model
    self.year = year
    self.odometer_reading = 0

 def get_descriptive_name(self):
    """Return a neatly formatted descriptive name."""
    long_name = str(self.year) + ' ' + self.make + ' ' + self.model
    return long_name.title()

 def read_odometer(self):
    """Print a statement showing the car's mileage."""
    print("This car has " + str(self.odometer_reading) + " miles on it.")

my_new_car = Car('audi', 'a4', 2016)
print(my_new_car.get_descriptive_name())
my_new_car.read_odometer()


class Car():

 def __init__(self, make, model, year):
    """Initialize attributes to describe a car."""
    self.make = make
    self.model = model
    self.year = year
    self.odometer_reading = 0

 def get_descriptive_name(self):
    """Return a neatly formatted descriptive name."""
    long_name = str(self.year) + ' ' + self.make + ' ' + self.model
    return long_name.title()

 def read_odometer(self):
    """Print a statement showing the car's mileage."""
    print("This car has " + str(self.odometer_reading) + " miles on it.")

my_new_car = Car('audi', 'a4', 2016)
print(my_new_car.get_descriptive_name())

my_new_car.odometer_reading = 23
my_new_car.read_odometer()


class Car():

 def __init__(self, make, model, year):
    """Initialize attributes to describe a car."""
    self.make = make
    self.model = model
    self.year = year
    self.odometer_reading = 0

 def get_descriptive_name(self):
    """Return a neatly formatted descriptive name."""
    long_name = str(self.year) + ' ' + self.make + ' ' + self.model
    return long_name.title()
    
 def read_odometer(self):
    """Print a statement showing the car's mileage."""
    print("This car has " + str(self.odometer_reading) + " miles on it.")

 def update_odometer(self, mileage):
    """Set the odometer reading to the given value."""
    self.odometer_reading = mileage

my_new_car = Car('audi', 'a4', 2016)
print(my_new_car.get_descriptive_name())

my_new_car.update_odometer(23)
my_new_car.read_odometer()


class Dog():
 """A simple attempt to model a dog."""

 def __init__(self, name, age):
    """Initialize name and age attributes."""
    self.name = name
    self.age = age


my_dog = Dog('willie', 6)
print("My dog's name is " + my_dog.name.title() + ".")
print("My dog is " + str(my_dog.age) + " years old.")


class Dog():
 """A simple attempt to model a dog."""

 def __init__(self, name, age):
    """Initialize name and age attributes."""
    self.name = name
    self.age = age
 def roll_over(self):
    """Simulate rolling over in response to a command."""
    print(self.name.title() + " rolled over!")

 def sit(self):
    """Simulate a dog sitting in response to a command."""
    print(self.name.title() + " is now sitting.")

my_dog = Dog('willie', 6)
my_dog.sit()
my_dog.roll_over()



class Car():
 """A simple attempt to represent a car."""
 def __init__(self, make, model, year):
    self.make = make
    self.model = model
    self.year = year
    self.odometer_reading = 0

 def get_descriptive_name(self):
    long_name = str(self.year) + ' ' + self.make + ' ' + self.model
    return long_name.title()

 def read_odometer(self):
    print("This car has " + str(self.odometer_reading) + " miles on it.")

 def update_odometer(self, mileage):
    if mileage >= self.odometer_reading:
        self.odometer_reading = mileage
    else:
        print("You can't roll back an odometer!")

 def increment_odometer(self, miles):
    self.odometer_reading += miles
 
class ElectricCar(Car):
    """Represent aspects of a car, specific to electric vehicles."""
    def __init__(self, make, model, year):
        """Initialize attributes of the parent class."""
        super().__init__(make, model, year)

my_tesla = ElectricCar('tesla', 'model s', 2016)
print(my_tesla.get_descriptive_name())






class Car():
 """A simple attempt to represent a car."""
 def __init__(self, make, model, year):
    self.make = make
    self.model = model
    self.year = year
    

 def get_descriptive_name(self):
    long_name = str(self.year) + ' ' + self.make + ' ' + self.model
    return long_name.title()

class ElectricCar(Car):
    """Represent aspects of a car, specific to electric vehicles."""
    def __init__(self, make, model, year):
        """Initialize attributes of the parent class."""
        super().__init__(make, model, year)
        self.battery_size = 70
    def describe_battery(self):
        """Print a statement describing the battery size."""
        print("This car has a " + str(self.battery_size) + "-kWh battery.")

my_tesla = ElectricCar('tesla', 'model s', 2016)
print(my_tesla.get_descriptive_name())
my_tesla.describe_battery()





class Restaurant():

    def __init__(self,restaurant_name,cuisine_type):

        self.restaurant_name = restaurant_name

        self.cuisine_type = cuisine_type

    def describe_restaurant(self):

        name = self.restaurant_name + ' - ' + self.cuisine_type

        return name.title()

    
def open_restaurant(self):

        print("The restaurant is opened now!")



my_restaurant = Restaurant('Pri Momi', 'bg kyhnq')

print(my_restaurant.describe_restaurant())

my_restaurant.open_restaurant()



IMPORT METHOD

from car import Car, ElectricCar
v my_beetle = Car('volkswagen', 'beetle', 2016)
print(my_beetle.get_descriptive_name())
w my_tesla = ElectricCar('tesla', 'roadster', 2016)
print(my_tesla.get_descriptive_name())



3.1415926535
 8979323846
 2643383279

with open('pi_digits.txt') as file_object:
 contents = file_object.read()
 print(contents.rstrip())  

#rstrip maha izlishnoto mqsto


filename = 'pi_digits.txt'
with open(filename) as file_object:
    for line in file_object:
        print(line)

#Reading Line by Line


filename = 'pi_digits.txt'
with open(filename) as file_object:
 lines = file_object.readlines()
for line in lines:
 print(line.rstrip())
 
#Making a List of Lines from a File
Readlines() suhranqva obektite kato list




filename = 'pi_digits.txt'
with open(filename) as file_object:
 lines = file_object.readlines()
 
pi_string = ''
for line in lines:
   pi_string += line.rstrip()

print(pi_string)
print(len(pi_string))


#Working with a File’s Contents




filename = 'pi_digits.txt'

with open(filename) as file_object:
 lines = file_object.readlines()
 
pi_string = ''
for line in lines:
 pi_string += line.rstrip()
 
birthday = input("Enter your birthday, in the form mmddyy: ")
if birthday in pi_string:
 print("Your birthday appears in the first million digits of pi!")
else:
 print("Your birthday does not appear in the first million digits of pi.")

Easy programka



REPLACE METHOD ---


message = "I really like dogs."

x = message.replace('dog', 'cat')

print (x)



Suzdava text v tekstov dokument 

filename = 'programming.txt'
with open(filename, 'w') as file_object:
 file_object.write("I love programming.")
 file_object.write("I love creating new games.")

read mode ('r'), write mode ('w'), append mode ('a'), or a mode that allows
you to read and write to the file ('r+').



append s replace


filename = 'programming.txt'
with open(filename, 'a') as file_object:
 file_object.write("I also love finding meaning in large datasets.\n")
 file_object.write("I love creating apps that can run in a browser.\n")

EXCEPTIONS

try:
 print(5/0)
except ZeroDivisionError:
 print("You can't divide by zero!")



ÅLEMENTAREN KALKULATOR - Dava greshka na 0

print("Give me two numbers, and I'll divide them.")
print("Enter 'q' to quit.")
while True:
 first_number = input("\nFirst number: ")
 if first_number == 'q':
    break
 second_number = input("Second number: ")
 if second_number == 'q':
    break
 answer = int(first_number) / int(second_number)
 print(answer)


ZATOVA VKARVAME METHOD TRY

print("Give me two numbers, and I'll divide them.")
print("Enter 'q' to quit.")
while True:
 first_number = input("\nFirst number: ")
 if first_number == 'q':
    break
 second_number = input("Second number: ")
 try:
    answer = int(first_number) / int(second_number)
 except ZeroDivisionError:
    print("You can't divide by 0!")
 else:
    print(answer)


#LIPSVASHT FAIL

filename = 'alice.txt'
try:
 with open(filename) as f_obj:
    contents = f_obj.read()

except FileNotFoundError:
 msg = "Sorry, the file " + filename + " does not exist."
 print(msg)


#ZAMESTVANE na txt fail v Python

txt = "one one was a race horse, two two was one too."

x = txt.replace("one", "three")

print(x)



Write a while loop that asks people why they like
programming. Each time someone enters a reason, add their reason to a file
that stores all the responses.

filename = 'programming.txt'
with open(filename, 'w') as file_object:
    file_object.write(input("Why u like programming : "))


Handling the FileNotFoundError Exception

filename = 'alice.txt'
try:
  with open(filename) as f_obj:
    contents = f_obj.read()

except FileNotFoundError:
 msg = "Sorry, the file " + filename + " does not exist."
 print(msg)

Analyzing Text
# yj chete dumite

title = "Alice in Wonderland"
title.split() 

filename = 'alice.txt'
try:
 with open(filename) as f_obj:
  contents = f_obj.read()
except FileNotFoundError:
 msg = "Sorry, the file " + filename + " does not exist."
 print(msg)

else:
 # Count the approximate number of words in the file.
 words = contents.split()
 num_words = len(words)
 print("The file " + filename + " has about " + str(num_words) + " words.")



Working with Multiple Files



def count_words(filename):
 """Count the approximate number of words in a file."""
 try:
    with open(filename) as f_obj:
     contents = f_obj.read()
 except FileNotFoundError:
    msg = "Sorry, the file " + filename + " does not exist."
    print(msg)
 else:
    # Count approximate number of words in the file.
    words = contents.split()
    num_words = len(words)
    print("The file " + filename + " has about " + str(num_words) +
    " words.")
filename = 'alice.txt'
count_words(filename)

#za multipile files

filenames = ['alice.txt', 'siddhartha.txt', 'moby_dick.txt', 'little_women.txt']
for filename in filenames:
 count_words(filename)


Failing Silently - propuska greski i failove koito ne sushtestvuvat

except FileNotFoundError:
   pass


JSON FILES ---->>>>


import json

numbers = [2, 3, 5, 7, 11, 13]
filename = 'numbers.json'
with open(filename, 'w') as f_obj:
 json.dump(numbers, f_obj)



import json

filename = 'numbers.json'
with open(filename) as f_obj:
 numbers = json.load(f_obj)

print(numbers)


Saving and Reading User-Generated Data

import json

username = input("What is your name? ")
filename = 'username.json'
with open(filename, 'w') as f_obj:
 json.dump(username, f_obj)
 print("We'll remember you when you come back, " + username + "!")

import json

filename = 'username.json'
with open(filename) as f_obj:
 username = json.load(f_obj)
 print("Welcome back, " + username + "!")


import json

# Load the username, if it has been stored previously.
# Otherwise, prompt for the username and store it.
filename = 'username.json'
try:
 with open(filename) as f_obj:
  username = json.load(f_obj)
except FileNotFoundError:
 username = input("What is your name? ")
 with open(filename, 'w') as f_obj:
  json.dump(username, f_obj)
  print("We'll remember you when you come back, " + username + "!")
else:
 print("Welcome back, " + username + "!")


import json

def greet_user():
 """Greet the user by name."""
 filename = 'username.json'
 try:
  with open(filename) as f_obj:
   username = json.load(f_obj)
 except FileNotFoundError:
  username = input("What is your name? ")
  with open(filename, 'w') as f_obj:
   json.dump(username, f_obj)
   print("We'll remember you when you come back, " + username + "!")
 else:
  print("Welcome back, " + username + "!")
greet_user()



import json

def get_stored_username():
 """Get stored username if available."""
 filename = 'username.json'
 try:
  with open(filename) as f_obj:
     username = json.load(f_obj)
 except FileNotFoundError:
   return None
 else:
   return username

def greet_user():
 """Greet the user by name."""
 username = get_stored_username()
 if username:
  print("Welcome back, " + username + "!")
 else:
  username = input("What is your name? ")
  filename = 'username.json'
  with open(filename, 'w') as f_obj:
   json.dump(username, f_obj)
   print("We'll remember you when you come back, " + username + "!")

greet_user()
  


